📊 Student Grade Analyzer
A Python project demonstrating core programming concepts for educational data processing

🚀 Features
Dynamic Data Entry: Input unlimited students/grades via CLI
Automated Grading: Implements A-F scale with conditional logic
Performance Analytics: Calculates averages & identifies top performers
Error Handling: Validates input formats (numeric grades only)

🛠️ Tech Stack
Core Python:
- Dictionaries (student data storage)
- Loops (input processing & analysis)
- Conditionals (grading logic)
- Tuples (immutable grade records)

💻 Code Highlights
1. Smart Data Storage
students = {
    "Alice": (92, 88, 95),  # Tuples for immutable grades
    "Bob": [76, 85, 89]     # Lists for flexible editing
}
2. Grade Calculation
def analyze_grades():
    for name, grades in students.items():
        avg = sum(grades)/len(grades)
        print(f"{name}: {calculate_grade(avg)} ({avg:.2f})")

3. Top Performer Logic
top_student = max(students.items(), key=lambda x: sum(x[1])/len(x[1]))
🧪 Testing
Run unit tests:

python test_grades.py
Sample Test Case:

def test_grade_calculation():
    assert calculate_grade(85) == "B"
    assert calculate_grade(92.5) == "A"
🌱 Next Steps
Add CSV import/export

Implement matplotlib visualizations

Build GUI version with Tkinter

def calculate_grade(avg):
    """Conditionals to determine letter grade"""
    if avg >= 90: return "A"
    elif avg >= 80: return "B"
    elif avg >= 70: return "C"
    elif avg >= 60: return "D"
    else: return "F"

def grade_analyzer():
    """Main function with loops and dictionary operations"""
    students = {}
    
    # Input loop
    while True:
        name = input("Enter student name (or 'done' to finish): ")
        if name.lower() == 'done':
            break
        
        grades = input("Enter 3 grades (math science english): ").split()
        grades = [float(grade) for grade in grades]  # List conversion
        
        students[name] = grades  # Dictionary storage
    
    # Analysis loop
    print("\n📊 Grade Report:")
    for name, grades in students.items():
        average = sum(grades) / len(grades)
        letter = calculate_grade(average)
        
        print(f"{name}:")
        print(f"  Grades: {grades}")
        print(f"  Average: {average:.2f} → {letter}")
    
    # Top performer calculation
    if students:
        top_student = max(students.items(), 
                         key=lambda x: sum(x[1])/len(x[1]))
        print(f"\n🏆 Top Performer: {top_student[0]} ({sum(top_student[1])/3:.2f})")

if __name__ == "__main__":
    grade_analyzer()

SAMPLE OUTPUT:
📊 Grade Report:
Alice:
  Grades: [88.0, 92.0, 95.0]
  Average: 91.67 → A

Bob:
  Grades: [76.0, 85.0, 89.0]
  Average: 83.33 → B

🏆 Top Performer: Alice (91.67)
